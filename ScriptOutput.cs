// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace StudioAvw.Gh.Parasites
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ScriptOutput : ScriptOutputBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
    this.Write(@"
using System;
using System.Collections;
using System.Collections.Generic;

using Rhino;
using Rhino.Geometry;

using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

// Non-default includes
            ");
            
            #line 20 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
    foreach (string usingName in CustomUsings) { 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 21 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(usingName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 22 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
    } 
            
            #line default
            #line hidden
            this.Write("\r\n/// Unique namespace, so visual studio won\'t throw any errors about duplicate d" +
                    "efinitions.\r\nnamespace ");
            
            #line 25 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(UniqueNamespace));
            
            #line default
            #line hidden
            // This is full text before Run scrip with all summaris
            //this.Write("\r\n{\r\n    /// <summary>\r\n    /// This class will be instantiated on demand by the " +
            //        "Script component.\r\n    /// </summary>\r\n    public class Script_Instance : GH_Scr" +
            //        "iptInstance\r\n    {\r\n\t    /// This method is added to prevent compiler errors whe" +
            //        "n opening this file in visual studio (code) or rider.\r\n\t    public override void" +
            //        " InvokeRunScript(IGH_Component owner, object rhinoDocument, int iteration, List<" +
            //        "object> inputs, IGH_DataAccess DA)\r\n        {\r\n            throw new NotImplemen" +
            //        "tedException();\r\n        }\r\n\r\n        #region Utility functions\r\n        /// <su" +
            //        "mmary>Print a String to the [Out] Parameter of the Script component.</summary>\r\n" +
            //        "        /// <param name=\"text\">String to print.</param>\r\n        private void Pr" +
            //        "int(string text) { /* Implementation hidden. */ }\r\n        /// <summary>Print a " +
            //        "formatted String to the [Out] Parameter of the Script component.</summary>\r\n    " +
            //        "    /// <param name=\"format\">String format.</param>\r\n        /// <param name=\"ar" +
            //        "gs\">Formatting parameters.</param>\r\n        private void Print(string format, pa" +
            //        "rams object[] args) { /* Implementation hidden. */ }\r\n        /// <summary>Print" +
            //        " useful information about an object instance to the [Out] Parameter of the Scrip" +
            //        "t component. </summary>\r\n        /// <param name=\"obj\">Object instance to parse." +
            //        "</param>\r\n        private void Reflect(object obj) { /* Implementation hidden. *" +
            //        "/ }\r\n        /// <summary>Print the signatures of all the overloads of a specifi" +
            //        "c method to the [Out] Parameter of the Script component. </summary>\r\n        ///" +
            //        " <param name=\"obj\">Object instance to parse.</param>\r\n        private void Refle" +
            //        "ct(object obj, string method_name) { /* Implementation hidden. */ }\r\n        #en" +
            //        "dregion\r\n        #region Members\r\n        /// <summary>Gets the current Rhino do" +
            //        "cument.</summary>\r\n        private readonly RhinoDoc RhinoDocument;\r\n        ///" +
            //        " <summary>Gets the Grasshopper document that owns this script.</summary>\r\n      " +
            //        "  private readonly GH_Document GrasshopperDocument;\r\n        /// <summary>Gets t" +
            //        "he Grasshopper script component that owns this script.</summary>\r\n        privat" +
            //        "e readonly IGH_Component Component;\r\n        /// <summary>\r\n        /// Gets the" +
            //        " current iteration count. The first call to RunScript() is associated with Itera" +
            //        "tion==0.\r\n        /// Any subsequent call within the same solution will incremen" +
            //        "t the Iteration count.\r\n        /// </summary>\r\n        private readonly int Ite" +
            //        "ration;\r\n        #endregion\r\n        /// <summary>\r\n        /// This procedure c" +
            //        "ontains the user code. Input parameters are provided as regular arguments,\r\n    " +
            //        "    /// Output parameters as ref arguments. You don\'t have to assign output para" +
            //        "meters,\r\n        /// they will have a default value.\r\n        /// </summary>\r\n  " +
            //        "      #region Runscript\r\n        private void RunScript(");

            // this is the short text without comments so it will give accurate line when debugging 
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// This class will be instantiated on demand by the " +
                 "Script component.\r\n    /// </summary>\r\n    public class Script_Instance : GH_Scr" +
                 "iptInstance\r\n    {\r\n\t    /// This method is added to prevent compiler errors whe" +
                 "n opening this file in visual studio (code) or rider.\r\n\t    public override void" +
                 " InvokeRunScript(IGH_Component owner, object rhinoDocument, int iteration, List<" +
                 "object> inputs, IGH_DataAccess DA)\r\n        {\r\n            throw new NotImplemen" +
                 "tedException();\r\n        }\r\n\r\n        #region Utility functions\r\n        private void Pr" +
                 "int(string text) { /* Implementation hidden. */ }\r\n        private void Print(string format, pa" +
                 "rams object[] args) { /* Implementation hidden. */ }\r\n        private void Reflect(object obj) { /* Implementation hidden. *" +
                 "/ }\r\n        private void Refle" +
                 "ct(object obj, string method_name) { /* Implementation hidden. */ }\r\n        #en" +
                 "dregion\r\n        #region Members\r\n        /// <summary>Gets the current Rhino do" +
                 "cument.</summary>\r\n        private readonly RhinoDoc RhinoDocument;\r\n        ///" +
                 " <summary>Gets the Grasshopper document that owns this script.</summary>\r\n      " +
                 "  private readonly GH_Document GrasshopperDocument;\r\n        /// <summary>Gets t" +
                 "he Grasshopper script component that owns this script.</summary>\r\n        privat" +
                 "e readonly IGH_Component Component;\r\n        /// <summary>\r\n        /// Gets the" +
                 " current iteration count. The first call to RunScript() is associated with Itera" +
                 "tion==0.\r\n        /// Any subsequent call within the same solution will incremen" +
                 "t the Iteration count.\r\n        /// </summary>\r\n        private readonly int Ite" +
                 "ration;\r\n        #endregion\r\n        /// <summary>\r\n        /// This procedure c" +
                 "ontains the user code. Input parameters are provided as regular arguments,\r\n    " +
                 "    /// Output parameters as ref arguments. You don\'t have to assign output para" +
                 "meters,\r\n        /// they will have a default value.\r\n        /// </summary>\r\n  " +
                 "      #region Runscript\r\n        private void RunScript(");

#line 72 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(InputOutput));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 74 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SourceCode));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n        #endregion\r\n        #region Additional\r\n");
            
            #line 79 "C:\Users\anchan\source\repos\ScriptParasite\ScriptOutput.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AdditionalCode));
            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ScriptOutputBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
